//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DlinqCRUD {
    
    
    public partial class CarsDataContext : System.Data.DLinq.DataContext {
        
        public System.Data.DLinq.Table<Customer> Customers;
        
        public System.Data.DLinq.Table<Inventory> Inventories;
        
        public System.Data.DLinq.Table<Order> Orders;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CarsDataContext() : 
                base(new System.Data.SqlClient.SqlConnection(global::DlinqCRUD.Properties.Settings.Default.DataConnection)) {
        }
    }
    
    [System.Data.DLinq.Table(Name="Customers")]
    public partial class Customer : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
        
        private string _FirstName;
        
        private string _LastName;
        
        private int _CustID;
        
        private System.Data.DLinq.EntitySet<Order> _Orders;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Customer() {
            this._Orders = new System.Data.DLinq.EntitySet<Order>(new System.Data.DLinq.Notification<Order>(this.Attach_Orders), new System.Data.DLinq.Notification<Order>(this.Attach_Orders));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="FirstName", Storage="_FirstName", DBType="char")]
        public virtual string FirstName {
            get {
                return this._FirstName;
            }
            set {
                if ((this._FirstName != value)) {
                    this.OnPropertyChanging("FirstName");
                    this._FirstName = value;
                    this.OnPropertyChanged("FirstName");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="LastName", Storage="_LastName", DBType="char")]
        public virtual string LastName {
            get {
                return this._LastName;
            }
            set {
                if ((this._LastName != value)) {
                    this.OnPropertyChanging("LastName");
                    this._LastName = value;
                    this.OnPropertyChanged("LastName");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="CustID", Storage="_CustID", DBType="int NOT NULL", Id=true)]
        public virtual int CustID {
            get {
                return this._CustID;
            }
            set {
                if ((this._CustID != value)) {
                    this.OnPropertyChanging("CustID");
                    this._CustID = value;
                    this.OnPropertyChanged("CustID");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Association(Name="FK_Orders_Customers", Storage="_Orders", OtherKey="CustID")]
        public virtual System.Data.DLinq.EntitySet<Order> Orders {
            get {
                return this._Orders;
            }
            set {
                this._Orders.Assign(value);
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void OnPropertyChanging(string propertyName) {
            if ((this.PropertyChanging != null)) {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void OnPropertyChanged(string propertyName) {
            if ((this.PropertyChanged != null)) {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void Attach_Orders(Order entity) {
            this.OnPropertyChanging(null);
            entity.Customer = this;
            this.OnPropertyChanged(null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void Detach_Orders(Order entity) {
            this.OnPropertyChanging(null);
            entity.Customer = null;
            this.OnPropertyChanged(null);
        }
    }
    
    [System.Data.DLinq.Table(Name="Inventory")]
    public partial class Inventory : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
        
        private int _CarID;
        
        private string _Make;
        
        private string _Color;
        
        private string _PetName;
        
        private System.Data.DLinq.EntitySet<Order> _Orders;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Inventory() {
            this._Orders = new System.Data.DLinq.EntitySet<Order>(new System.Data.DLinq.Notification<Order>(this.Attach_Orders), new System.Data.DLinq.Notification<Order>(this.Attach_Orders));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="CarID", Storage="_CarID", DBType="int NOT NULL", Id=true)]
        public virtual int CarID {
            get {
                return this._CarID;
            }
            set {
                if ((this._CarID != value)) {
                    this.OnPropertyChanging("CarID");
                    this._CarID = value;
                    this.OnPropertyChanged("CarID");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="Make", Storage="_Make", DBType="char")]
        public virtual string Make {
            get {
                return this._Make;
            }
            set {
                if ((this._Make != value)) {
                    this.OnPropertyChanging("Make");
                    this._Make = value;
                    this.OnPropertyChanged("Make");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="Color", Storage="_Color", DBType="char")]
        public virtual string Color {
            get {
                return this._Color;
            }
            set {
                if ((this._Color != value)) {
                    this.OnPropertyChanging("Color");
                    this._Color = value;
                    this.OnPropertyChanged("Color");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="PetName", Storage="_PetName", DBType="char")]
        public virtual string PetName {
            get {
                return this._PetName;
            }
            set {
                if ((this._PetName != value)) {
                    this.OnPropertyChanging("PetName");
                    this._PetName = value;
                    this.OnPropertyChanged("PetName");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Association(Name="FK_Orders_Inventory", Storage="_Orders", OtherKey="CarID")]
        public virtual System.Data.DLinq.EntitySet<Order> Orders {
            get {
                return this._Orders;
            }
            set {
                this._Orders.Assign(value);
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void OnPropertyChanging(string propertyName) {
            if ((this.PropertyChanging != null)) {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void OnPropertyChanged(string propertyName) {
            if ((this.PropertyChanged != null)) {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void Attach_Orders(Order entity) {
            this.OnPropertyChanging(null);
            entity.Inventory = this;
            this.OnPropertyChanged(null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void Detach_Orders(Order entity) {
            this.OnPropertyChanging(null);
            entity.Inventory = null;
            this.OnPropertyChanged(null);
        }
    }
    
    [System.Data.DLinq.Table(Name="Orders")]
    public partial class Order : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
        
        private int _OrderID;
        
        private System.Nullable<int> _CarID;
        
        private System.Nullable<int> _CustID;
        
        private System.Data.DLinq.EntityRef<Customer> _Customer;
        
        private System.Data.DLinq.EntityRef<Inventory> _Inventory;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Order() {
            this._Customer = default(System.Data.DLinq.EntityRef<Customer>);
            this._Inventory = default(System.Data.DLinq.EntityRef<Inventory>);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="OrderID", Storage="_OrderID", DBType="int NOT NULL", Id=true)]
        public virtual int OrderID {
            get {
                return this._OrderID;
            }
            set {
                if ((this._OrderID != value)) {
                    this.OnPropertyChanging("OrderID");
                    this._OrderID = value;
                    this.OnPropertyChanged("OrderID");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="CarID", Storage="_CarID", DBType="int")]
        public virtual System.Nullable<int> CarID {
            get {
                return this._CarID;
            }
            set {
                if ((this._CarID != value)) {
                    this.OnPropertyChanging("CarID");
                    this._CarID = value;
                    this.OnPropertyChanged("CarID");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Column(Name="CustID", Storage="_CustID", DBType="int")]
        public virtual System.Nullable<int> CustID {
            get {
                return this._CustID;
            }
            set {
                if ((this._CustID != value)) {
                    this.OnPropertyChanging("CustID");
                    this._CustID = value;
                    this.OnPropertyChanged("CustID");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Association(Name="FK_Orders_Customers", Storage="_Customer", ThisKey="CustID", IsParent=true)]
        public Customer Customer {
            get {
                return this._Customer.Entity;
            }
            set {
                if ((this._Customer.Entity != value)) {
                    this.OnPropertyChanging("Customer");
                    if ((this._Customer.Entity != null)) {
                        this._Customer.Entity = null;
                        this._Customer.Entity.Orders.Remove(this);
                    }
                    this._Customer.Entity = value;
                    if ((value != null)) {
                        value.Orders.Add(this);
                    }
                    this.OnPropertyChanged("Customer");
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.Data.DLinq.Association(Name="FK_Orders_Inventory", Storage="_Inventory", ThisKey="CarID", IsParent=true)]
        public Inventory Inventory {
            get {
                return this._Inventory.Entity;
            }
            set {
                if ((this._Inventory.Entity != value)) {
                    this.OnPropertyChanging("Inventory");
                    if ((this._Inventory.Entity != null)) {
                        this._Inventory.Entity = null;
                        this._Inventory.Entity.Orders.Remove(this);
                    }
                    this._Inventory.Entity = value;
                    if ((value != null)) {
                        value.Orders.Add(this);
                    }
                    this.OnPropertyChanged("Inventory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void OnPropertyChanging(string propertyName) {
            if ((this.PropertyChanging != null)) {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void OnPropertyChanged(string propertyName) {
            if ((this.PropertyChanged != null)) {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
