//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarsDatabase {
  using System;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Reflection;
  using System.Query;
  using System.Expressions;
  using System.Data;
  using System.Data.DLinq;
  
  
  public partial class Cars : DataContext {
    
    public Table<Customers> Customers;
    
    public Table<Inventory> Inventory;
    
    public Table<Orders> Orders;
    
    public Cars(string connection) : 
        base(connection) {
    }
    
    public Cars(System.Data.IDbConnection connection) : 
        base(connection) {
    }
    
    public Cars(string connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
    
    public Cars(System.Data.IDbConnection connection, System.Data.DLinq.MappingSource mappingSource) : 
        base(connection, mappingSource) {
    }
    
    [StoredProcedure(Name="GetPetName")]
    public int GetPetName([Parameter(DBType="Int")] System.Nullable<int> carID, [Parameter(DBType="Char(20)")] ref string petName) {
      StoredProcedureResult result = this.ExecuteStoredProcedure(((MethodInfo)(MethodInfo.GetCurrentMethod())), carID, petName);
      petName = ((string)(result.GetParameterValue(1)));
      return result.ReturnValue.Value;
    }
  }
  
  [Table(Name="Customers")]
  public partial class Customers : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private string _FirstName;
    
    private string _LastName;
    
    private int _CustID;
    
    private EntitySet<Orders> _Orders;
    
    public Customers() {
      this._Orders = new EntitySet<Orders>(new Notification<Orders>(this.attach_Orders), new Notification<Orders>(this.detach_Orders));
    }
    
    [Column(Storage="_FirstName", DBType="Char(20)")]
    public string FirstName {
      get {
        return this._FirstName;
      }
      set {
        if ((this._FirstName != value)) {
          this.OnPropertyChanging("FirstName");
          this._FirstName = value;
          this.OnPropertyChanged("FirstName");
        }
      }
    }
    
    [Column(Storage="_LastName", DBType="Char(20)")]
    public string LastName {
      get {
        return this._LastName;
      }
      set {
        if ((this._LastName != value)) {
          this.OnPropertyChanging("LastName");
          this._LastName = value;
          this.OnPropertyChanged("LastName");
        }
      }
    }
    
    [Column(Storage="_CustID", DBType="Int NOT NULL", Id=true)]
    public int CustID {
      get {
        return this._CustID;
      }
      set {
        if ((this._CustID != value)) {
          this.OnPropertyChanging("CustID");
          this._CustID = value;
          this.OnPropertyChanged("CustID");
        }
      }
    }
    
    [Association(Name="FK_Orders_Customers", Storage="_Orders", OtherKey="CustID")]
    public EntitySet<Orders> Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Orders(Orders entity) {
      this.OnPropertyChanging(null);
      entity.Customers = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Orders(Orders entity) {
      this.OnPropertyChanging(null);
      entity.Customers = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Inventory")]
  public partial class Inventory : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _CarID;
    
    private string _Make;
    
    private string _Color;
    
    private string _PetName;
    
    private EntitySet<Orders> _Orders;
    
    public Inventory() {
      this._Orders = new EntitySet<Orders>(new Notification<Orders>(this.attach_Orders), new Notification<Orders>(this.detach_Orders));
    }
    
    [Column(Storage="_CarID", DBType="Int NOT NULL", Id=true)]
    public int CarID {
      get {
        return this._CarID;
      }
      set {
        if ((this._CarID != value)) {
          this.OnPropertyChanging("CarID");
          this._CarID = value;
          this.OnPropertyChanged("CarID");
        }
      }
    }
    
    [Column(Storage="_Make", DBType="Char(20)")]
    public string Make {
      get {
        return this._Make;
      }
      set {
        if ((this._Make != value)) {
          this.OnPropertyChanging("Make");
          this._Make = value;
          this.OnPropertyChanged("Make");
        }
      }
    }
    
    [Column(Storage="_Color", DBType="Char(20)")]
    public string Color {
      get {
        return this._Color;
      }
      set {
        if ((this._Color != value)) {
          this.OnPropertyChanging("Color");
          this._Color = value;
          this.OnPropertyChanged("Color");
        }
      }
    }
    
    [Column(Storage="_PetName", DBType="Char(20)")]
    public string PetName {
      get {
        return this._PetName;
      }
      set {
        if ((this._PetName != value)) {
          this.OnPropertyChanging("PetName");
          this._PetName = value;
          this.OnPropertyChanged("PetName");
        }
      }
    }
    
    [Association(Name="FK_Orders_Inventory", Storage="_Orders", OtherKey="CarID")]
    public EntitySet<Orders> Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders.Assign(value);
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    private void attach_Orders(Orders entity) {
      this.OnPropertyChanging(null);
      entity.Inventory = this;
      this.OnPropertyChanged(null);
    }
    
    private void detach_Orders(Orders entity) {
      this.OnPropertyChanging(null);
      entity.Inventory = null;
      this.OnPropertyChanged(null);
    }
  }
  
  [Table(Name="Orders")]
  public partial class Orders : System.Data.DLinq.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged {
    
    private int _OrderID;
    
    private System.Nullable<int> _CarID;
    
    private System.Nullable<int> _CustID;
    
    private EntityRef<Customers> _Customers;
    
    private EntityRef<Inventory> _Inventory;
    
    public Orders() {
      this._Customers = default(EntityRef<Customers>);
      this._Inventory = default(EntityRef<Inventory>);
    }
    
    [Column(Storage="_OrderID", DBType="Int NOT NULL", Id=true)]
    public int OrderID {
      get {
        return this._OrderID;
      }
      set {
        if ((this._OrderID != value)) {
          this.OnPropertyChanging("OrderID");
          this._OrderID = value;
          this.OnPropertyChanged("OrderID");
        }
      }
    }
    
    [Column(Storage="_CarID", DBType="Int")]
    public System.Nullable<int> CarID {
      get {
        return this._CarID;
      }
      set {
        if ((this._CarID != value)) {
          this.OnPropertyChanging("CarID");
          this._CarID = value;
          this.OnPropertyChanged("CarID");
        }
      }
    }
    
    [Column(Storage="_CustID", DBType="Int")]
    public System.Nullable<int> CustID {
      get {
        return this._CustID;
      }
      set {
        if ((this._CustID != value)) {
          this.OnPropertyChanging("CustID");
          this._CustID = value;
          this.OnPropertyChanged("CustID");
        }
      }
    }
    
    [Association(Name="FK_Orders_Customers", Storage="_Customers", ThisKey="CustID", IsParent=true)]
    public Customers Customers {
      get {
        return this._Customers.Entity;
      }
      set {
        Customers v = this._Customers.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Customers");
          if ((v != null)) {
            this._Customers.Entity = null;
            v.Orders.Remove(this);
          }
          this._Customers.Entity = value;
          if ((value != null)) {
            value.Orders.Add(this);
          }
          this.OnPropertyChanged("Customers");
        }
      }
    }
    
    [Association(Name="FK_Orders_Inventory", Storage="_Inventory", ThisKey="CarID", IsParent=true)]
    public Inventory Inventory {
      get {
        return this._Inventory.Entity;
      }
      set {
        Inventory v = this._Inventory.Entity;
        if ((v != value)) {
          this.OnPropertyChanging("Inventory");
          if ((v != null)) {
            this._Inventory.Entity = null;
            v.Orders.Remove(this);
          }
          this._Inventory.Entity = value;
          if ((value != null)) {
            value.Orders.Add(this);
          }
          this.OnPropertyChanged("Inventory");
        }
      }
    }
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    protected virtual void OnPropertyChanging(string PropertyName) {
      if ((this.PropertyChanging != null)) {
        this.PropertyChanging(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
    
    protected virtual void OnPropertyChanged(string PropertyName) {
      if ((this.PropertyChanged != null)) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
      }
    }
  }
}
